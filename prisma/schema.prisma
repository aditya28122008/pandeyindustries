// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model User {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?         @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  phone           String          @default("")
  Authenticator   Authenticator[]
  payments        PaymentMethod[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  Address         Address[]
  ProfileComplete Boolean         @default(false)
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Products {
  id         String          @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  OrPrice    Int
  desc       String
  pincodes   String[]
  image      String
  imagePubId String
  slug       String          @unique
  brand      String
  disPrice   String
  categoryId String          @db.ObjectId
  category   ProductCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("products")
}

model Address {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  hno        String  @default("")
  street     String  @default("")
  city       String  @default("")
  state      String  @default("")
  zip        String  @default("")
  User       User?   @relation(fields: [customerId], references: [id])
  customerId String? @db.ObjectId
}

model PaymentMethod {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  cardType   String
  cardNumber String   @unique
  expiration String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ProductCategory {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String     @unique
  title       String
  url         String     @unique
  description String
  tagline     String
  products    Products[] // Relation field for the products in this category
  image       String
  navView     Boolean    @default(false)
  imagePubID  String
}
